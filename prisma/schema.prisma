// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}
model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth

model Product {
    id String @id @default(uuid())
    userId String
    title String
    description String?
    price String
    quantity Int
    variants Variants[]
    createdAt DateTime @default(now())
    user User @relation(fields: [userId], references: [id])
    like Like[]

    @@index([userId])
    @@unique([createdAt, id])
}

// model Category {
//     id String @id @default(uuid())
//     name String @unique
//     createdAt DateTime @default(now())
//     products Product[]
// }
model Variants {
    id String @id @default(uuid())
    color String
    size  String
    qty   String
    productId String 
    product Product @relation(fields: [productId], references: [id], onDelete: NoAction)
   @@index(productId)
}





model Like {
    userId    String
    productId String
    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@id([userId, productId])
    @@index ([userId])
    @@index ([productId])


}
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    products      Product[]
    likes         Like[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
